openapi: 3.0.3
info:
  title: Targetdata Challenge
  description: |-
    Desafio desenvolvido por [Otávio de Paula](https://www.linkedin.com/in/depaulaotavio/), como parte do processo seletivo da empresa Targetdata.
    
    Minhas redes sociais:
    - [LinkedIn](https://www.linkedin.com/in/depaulaotavio/)
    - [Github](https://github.com/otaviodepaula)
  contact:
    email: otaviopaulaferreira@gmail.com
  version: 1.0.0

servers:
  - url: http://localhost:5000
tags:
  - name: user
    description: Operations about user
paths:
  /user:
    post:
      tags:
        - user
      summary: Cadastra um usuário no mongodb
      description: Necessita de username e password no body
      operationId: createUser
      requestBody:
        description: Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /login:
    get:
      tags:
        - user
      summary: Gera um token de acesso, o usuário e senha devem ser 'admin'
      description: ''
      operationId: login
      parameters:
        - name: username
          in: query
          description: Username
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Senha
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/{id}:
    get:
      tags:
        - user
      summary: Retorna um usuário pelo ID
      description: ''
      operationId: getUserByName
      parameters:
        - name: _id
          in: path
          description: 'Retorna usuário pelo ID'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Usuário não encontrado
  /endereco:
    post:
      tags:
        - user
      summary: 'A partir de um cep retorna a previsão do tempo daquela localização'
      description: ''
      operationId: loginUser
      parameters:
        - name: cep
          in: query
          description: cep
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Não encontrado
components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          example: 6421a4a4143ed19f266a1b83
        username:
          type: string
          example: theUser      
        password:
          type: string
          example: '12345'
      xml:
        name: user
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header